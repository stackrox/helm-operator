From 5d45d80facfc43612778cba65ac0cc92cab6c669 Mon Sep 17 00:00:00 2001
From: Simon Baeumer <sbaumer@redhat.com>
Date: Thu, 5 May 2022 09:23:24 +0200
Subject: [PATCH 08/12] Fix updater test to use existing fields from
 deployment's status field

---
 pkg/reconciler/internal/updater/updater.go    |  2 +-
 .../internal/updater/updater_test.go          | 28 +++++++++++--------
 pkg/reconciler/reconciler.go                  |  2 +-
 3 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/pkg/reconciler/internal/updater/updater.go b/pkg/reconciler/internal/updater/updater.go
index dccabe1..19e84af 100644
--- a/pkg/reconciler/internal/updater/updater.go
+++ b/pkg/reconciler/internal/updater/updater.go
@@ -28,8 +28,8 @@ import (
 	"k8s.io/client-go/util/retry"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 
-	"github.com/operator-framework/helm-operator/pkg/extensions"
 	"github.com/operator-framework/helm-operator-plugins/internal/sdk/controllerutil"
+	"github.com/operator-framework/helm-operator-plugins/pkg/extensions"
 	"github.com/operator-framework/helm-operator-plugins/pkg/internal/status"
 )
 
diff --git a/pkg/reconciler/internal/updater/updater_test.go b/pkg/reconciler/internal/updater/updater_test.go
index e42b1c5..a4f8c3a 100644
--- a/pkg/reconciler/internal/updater/updater_test.go
+++ b/pkg/reconciler/internal/updater/updater_test.go
@@ -35,7 +35,11 @@ import (
 	"github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/conditions"
 )
 
-const testFinalizer = "testFinalizer"
+const (
+	testFinalizer           = "testFinalizer"
+	availableReplicasStatus = int64(3)
+	replicasStatus          = int64(5)
+)
 
 var _ = Describe("Updater", func() {
 	var (
@@ -112,12 +116,12 @@ var _ = Describe("Updater", func() {
 		It("should support a mix of standard and custom status updates", func() {
 			u.UpdateStatus(EnsureCondition(conditions.Deployed(corev1.ConditionTrue, "", "")))
 			u.UpdateStatusCustom(func(uSt *unstructured.Unstructured) bool {
-				Expect(unstructured.SetNestedMap(uSt.Object, map[string]interface{}{"bar": "baz"}, "foo")).To(Succeed())
+				Expect(unstructured.SetNestedField(uSt.Object, replicasStatus, "replicas")).To(Succeed())
 				return true
 			})
 			u.UpdateStatus(EnsureCondition(conditions.Irreconcilable(corev1.ConditionFalse, "", "")))
 			u.UpdateStatusCustom(func(uSt *unstructured.Unstructured) bool {
-				Expect(unstructured.SetNestedField(uSt.Object, "quux", "foo", "qux")).To(Succeed())
+				Expect(unstructured.SetNestedField(uSt.Object, availableReplicasStatus, "availableReplicas")).To(Succeed())
 				return true
 			})
 			u.UpdateStatus(EnsureCondition(conditions.Initialized(corev1.ConditionTrue, "", "")))
@@ -129,20 +133,20 @@ var _ = Describe("Updater", func() {
 			Expect(found).To(BeFalse())
 			Expect(err).To(Not(HaveOccurred()))
 
-			val, found, err := unstructured.NestedString(obj.Object, "status", "foo", "bar")
-			Expect(val).To(Equal("baz"))
+			val, found, err := unstructured.NestedInt64(obj.Object, "status", "replicas")
+			Expect(val).To(Equal(replicasStatus))
 			Expect(found).To(BeTrue())
 			Expect(err).To(Not(HaveOccurred()))
 
-			val, found, err = unstructured.NestedString(obj.Object, "status", "foo", "qux")
-			Expect(val).To(Equal("quux"))
+			val, found, err = unstructured.NestedInt64(obj.Object, "status", "availableReplicas")
+			Expect(val).To(Equal(availableReplicasStatus))
 			Expect(found).To(BeTrue())
 			Expect(err).To(Not(HaveOccurred()))
 		})
 
 		It("should preserve any custom status across multiple apply calls", func() {
 			u.UpdateStatusCustom(func(uSt *unstructured.Unstructured) bool {
-				Expect(unstructured.SetNestedMap(uSt.Object, map[string]interface{}{"bar": "baz"}, "foo")).To(Succeed())
+				Expect(unstructured.SetNestedField(uSt.Object, int64(5), "replicas")).To(Succeed())
 				return true
 			})
 			Expect(u.Apply(context.TODO(), obj)).To(Succeed())
@@ -153,8 +157,8 @@ var _ = Describe("Updater", func() {
 			Expect(found).To(BeFalse())
 			Expect(err).To(Not(HaveOccurred()))
 
-			val, found, err := unstructured.NestedString(obj.Object, "status", "foo", "bar")
-			Expect(val).To(Equal("baz"))
+			val, found, err := unstructured.NestedInt64(obj.Object, "status", "replicas")
+			Expect(val).To(Equal(replicasStatus))
 			Expect(found).To(BeTrue())
 			Expect(err).To(Succeed())
 
@@ -168,8 +172,8 @@ var _ = Describe("Updater", func() {
 			Expect(found).To(BeFalse())
 			Expect(err).To(Not(HaveOccurred()))
 
-			val, found, err = unstructured.NestedString(obj.Object, "status", "foo", "bar")
-			Expect(val).To(Equal("baz"))
+			val, found, err = unstructured.NestedInt64(obj.Object, "status", "replicas")
+			Expect(val).To(Equal(replicasStatus))
 			Expect(found).To(BeTrue())
 			Expect(err).To(Succeed())
 		})
diff --git a/pkg/reconciler/reconciler.go b/pkg/reconciler/reconciler.go
index 7e1f12d..8b34f59 100644
--- a/pkg/reconciler/reconciler.go
+++ b/pkg/reconciler/reconciler.go
@@ -50,6 +50,7 @@ import (
 	"github.com/operator-framework/helm-operator-plugins/internal/sdk/controllerutil"
 	"github.com/operator-framework/helm-operator-plugins/pkg/annotation"
 	helmclient "github.com/operator-framework/helm-operator-plugins/pkg/client"
+	"github.com/operator-framework/helm-operator-plugins/pkg/extensions"
 	"github.com/operator-framework/helm-operator-plugins/pkg/hook"
 	"github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/conditions"
 	"github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/diff"
@@ -57,7 +58,6 @@ import (
 	"github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/updater"
 	internalvalues "github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/values"
 	"github.com/operator-framework/helm-operator-plugins/pkg/values"
-	"github.com/joelanford/helm-operator/pkg/extensions"
 )
 
 const uninstallFinalizer = "uninstall-helm-release"
-- 
2.48.1

