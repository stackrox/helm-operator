From 25756d733b7b7d4acfa8c7e4b2226f02e3386e50 Mon Sep 17 00:00:00 2001
From: Malte Isberner <2822367+misberner@users.noreply.github.com>
Date: Tue, 15 Jun 2021 12:16:55 +0200
Subject: [PATCH 03/11] Allow adding reconciliation extensions (#9)

---
 pkg/extensions/types.go      | 12 +++++++
 pkg/reconciler/reconciler.go | 69 ++++++++++++++++++++++++++++++++++--
 2 files changed, 79 insertions(+), 2 deletions(-)
 create mode 100644 pkg/extensions/types.go

diff --git a/pkg/extensions/types.go b/pkg/extensions/types.go
new file mode 100644
index 0000000..689f91d
--- /dev/null
+++ b/pkg/extensions/types.go
@@ -0,0 +1,12 @@
+package extensions
+
+import (
+	"context"
+	"github.com/go-logr/logr"
+	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
+)
+
+// ReconcileExtension is an arbitrary extension that can be implemented to run either before
+// or after the main Helm reconciliation action.
+// An error returned by a ReconcileExtension will cause the Reconcile to fail, unlike a hook error.
+type ReconcileExtension func(context.Context, *unstructured.Unstructured, logr.Logger) error
diff --git a/pkg/reconciler/reconciler.go b/pkg/reconciler/reconciler.go
index 2b6f070..9daea10 100644
--- a/pkg/reconciler/reconciler.go
+++ b/pkg/reconciler/reconciler.go
@@ -57,6 +57,7 @@ import (
 	"github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/updater"
 	internalvalues "github.com/operator-framework/helm-operator-plugins/pkg/reconciler/internal/values"
 	"github.com/operator-framework/helm-operator-plugins/pkg/values"
+	"github.com/joelanford/helm-operator/pkg/extensions"
 )
 
 const uninstallFinalizer = "uninstall-helm-release"
@@ -71,6 +72,9 @@ type Reconciler struct {
 	preHooks           []hook.PreHook
 	postHooks          []hook.PostHook
 
+	preExtensions  []extensions.ReconcileExtension
+	postExtensions []extensions.ReconcileExtension
+
 	log                              logr.Logger
 	gvk                              *schema.GroupVersionKind
 	chrt                             *chart.Chart
@@ -449,6 +453,20 @@ func WithPreHook(h hook.PreHook) Option {
 	}
 }
 
+// WithPreExtension is an Option that configures the reconciler to run the given
+// extension before performing any reconciliation steps (including values translation).
+// An error returned from the extension will cause the reconciliation to fail.
+// This should be preferred to WithPreHook in most cases, except for when the logic
+// depends on the translated Helm values.
+// The extension will be invoked with the raw object state; meaning it needs to be careful
+// to check for existence of the deletionTimestamp field.
+func WithPreExtension(e extensions.ReconcileExtension) Option {
+	return func(r *Reconciler) error {
+		r.preExtensions = append(r.preExtensions, e)
+		return nil
+	}
+}
+
 // WithPostHook is an Option that configures the reconciler to run the given
 // PostHook just after performing any non-uninstall release actions.
 func WithPostHook(h hook.PostHook) Option {
@@ -458,6 +476,22 @@ func WithPostHook(h hook.PostHook) Option {
 	}
 }
 
+// WithPostExtension is an Option that configures the reconciler to run the given
+// extension after performing any reconciliation steps (including uninstall of the release,
+// but not removal of the finalizer).
+// An error returned from the extension will cause the reconciliation to fail, which might
+// prevent the finalizer from getting removed.
+// This should be preferred to WithPostHook in most cases, except for when the logic
+// depends on the translated Helm values.
+// The extension will be invoked with the raw object state; meaning it needs to be careful
+// to check for existence of the deletionTimestamp field.
+func WithPostExtension(e extensions.ReconcileExtension) Option {
+	return func(r *Reconciler) error {
+		r.postExtensions = append(r.postExtensions, e)
+		return nil
+	}
+}
+
 // WithValueTranslator is an Option that configures a function that translates a
 // custom resource to the values passed to Helm.
 // Use this if you need to customize the logic that translates your custom resource to Helm values.
@@ -622,6 +656,16 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (_ ctrl.Re
 	}
 	u.UpdateStatus(updater.EnsureCondition(conditions.Initialized(corev1.ConditionTrue, "", "")))
 
+	for _, ext := range r.preExtensions {
+		if err := ext(ctx, obj, r.log); err != nil {
+			u.UpdateStatus(
+				updater.EnsureCondition(conditions.Irreconcilable(corev1.ConditionTrue, conditions.ReasonReconcileError, err)),
+				updater.EnsureConditionUnknown(conditions.TypeReleaseFailed),
+			)
+			return ctrl.Result{}, err
+		}
+	}
+
 	if obj.GetDeletionTimestamp() != nil {
 		if err := r.handleDeletion(ctx, actionClient, obj, log); err != nil {
 			return ctrl.Result{}, err
@@ -684,6 +728,16 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (_ ctrl.Re
 		}
 	}
 
+	for _, ext := range r.postExtensions {
+		if err := ext(ctx, obj, r.log); err != nil {
+			u.UpdateStatus(
+				updater.EnsureCondition(conditions.Irreconcilable(corev1.ConditionTrue, conditions.ReasonReconcileError, err)),
+				updater.EnsureConditionUnknown(conditions.TypeReleaseFailed),
+			)
+			return ctrl.Result{}, err
+		}
+	}
+
 	ensureDeployedRelease(&u, rel)
 	u.UpdateStatus(
 		updater.EnsureCondition(conditions.ReleaseFailed(corev1.ConditionFalse, "", "")),
@@ -734,7 +788,7 @@ func (r *Reconciler) handleDeletion(ctx context.Context, actionClient helmclient
 					err = applyErr
 				}
 			}()
-			return r.doUninstall(actionClient, &uninstallUpdater, obj, log)
+			return r.doUninstall(ctx, actionClient, &uninstallUpdater, obj, log)
 		}(); err != nil {
 			return err
 		}
@@ -886,7 +940,7 @@ func (r *Reconciler) doReconcile(actionClient helmclient.ActionInterface, u *upd
 	return nil
 }
 
-func (r *Reconciler) doUninstall(actionClient helmclient.ActionInterface, u *updater.Updater, obj *unstructured.Unstructured, log logr.Logger) error {
+func (r *Reconciler) doUninstall(ctx context.Context, actionClient helmclient.ActionInterface, u *updater.Updater, obj *unstructured.Unstructured, log logr.Logger) error {
 	var opts []helmclient.UninstallOption
 	for name, annot := range r.uninstallAnnotations {
 		if v, ok := obj.GetAnnotations()[name]; ok {
@@ -911,6 +965,17 @@ func (r *Reconciler) doUninstall(actionClient helmclient.ActionInterface, u *upd
 			fmt.Println(diff.Generate(resp.Release.Manifest, ""))
 		}
 	}
+
+	for _, ext := range r.postExtensions {
+		if err := ext(ctx, obj, r.log); err != nil {
+			u.UpdateStatus(
+				updater.EnsureCondition(conditions.Irreconcilable(corev1.ConditionTrue, conditions.ReasonReconcileError, err)),
+				updater.EnsureConditionUnknown(conditions.TypeReleaseFailed),
+			)
+			return err
+		}
+	}
+
 	u.Update(updater.RemoveFinalizer(uninstallFinalizer))
 	u.UpdateStatus(
 		updater.EnsureCondition(conditions.ReleaseFailed(corev1.ConditionFalse, "", "")),
-- 
2.48.1

