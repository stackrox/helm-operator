From 991117d986687eb0d68cbfeb1951f3492bb1d50d Mon Sep 17 00:00:00 2001
From: Marcin Owsiany <porridge@redhat.com>
Date: Tue, 14 Dec 2021 06:55:05 +0100
Subject: [PATCH 07/12] ROX- 8130: Add WithExtraWatch option. (#22)

---
 pkg/reconciler/reconciler.go | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/pkg/reconciler/reconciler.go b/pkg/reconciler/reconciler.go
index bbdd5b1..7e1f12d 100644
--- a/pkg/reconciler/reconciler.go
+++ b/pkg/reconciler/reconciler.go
@@ -81,6 +81,7 @@ type Reconciler struct {
 	selectorPredicate                predicate.Predicate
 	overrideValues                   map[string]string
 	skipDependentWatches             bool
+	extraWatchSources                []source.Source
 	maxConcurrentReconciles          int
 	reconcilePeriod                  time.Duration
 	waitForDeletionTimeout           time.Duration
@@ -98,6 +99,12 @@ type Reconciler struct {
 	uninstallAnnotations map[string]annotation.Uninstall
 }
 
+type watchDescription struct {
+	src        source.Source
+	predicates []predicate.Predicate
+	handler    handler.EventHandler
+}
+
 // New creates a new Reconciler that reconciles custom resources that define a
 // Helm release. New takes variadic Option arguments that are used to configure
 // the Reconciler.
@@ -555,6 +562,16 @@ func WithValueMapper(m values.Mapper) Option {
 	}
 }
 
+// WithExtraWatch is an Option that adds an extra event watch.
+// Use this if you want your controller to respond to events other than coming from the primary custom resource,
+// the helm release secret, or resources created by your helm chart.
+func WithExtraWatch(src source.Source) Option {
+	return func(r *Reconciler) error {
+		r.extraWatchSources = append(r.extraWatchSources, src)
+		return nil
+	}
+}
+
 // WithSelector is an Option that configures the reconciler to creates a
 // predicate that is used to filter resources based on the specified selector
 func WithSelector(s metav1.LabelSelector) Option {
@@ -1144,6 +1161,12 @@ func (r *Reconciler) setupWatches(mgr ctrl.Manager, c controller.Controller) err
 		return err
 	}
 
+	for _, s := range r.extraWatchSources {
+		if err := c.Watch(s); err != nil {
+			return err
+		}
+	}
+
 	if !r.skipDependentWatches {
 		r.postHooks = append([]hook.PostHook{internalhook.NewDependentResourceWatcher(c, mgr.GetRESTMapper(), mgr.GetCache(), mgr.GetScheme())}, r.postHooks...)
 	}
-- 
2.48.1

